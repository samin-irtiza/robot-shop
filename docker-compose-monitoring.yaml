version: '3'
services:
  prometheus:
    image: ${PROMETHEUS_IMAGE}
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
      - --enable-feature=otlp-write-receiver
      - --web.enable-remote-write-receiver
    volumes:
      - ./prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"
    networks:
      - monitoring-zone


  jaeger:
    image: ${JAEGERTRACING_IMAGE}
    container_name: jaeger
    command:
      - "--memory.max-traces=5000"
      - "--query.base-path=/jaeger/ui"
 #     - "--prometheus.server-url=http://${PROMETHEUS_ADDR}"
 #     - "--prometheus.query.normalize-calls=true"
 #     - "--prometheus.query.normalize-duration=true"
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    networks:
      - monitoring-zone
    # ports:
    #   - "${JAEGER_SERVICE_PORT}:${JAEGER_SERVICE_PORT}"          # Jaeger UI
    #   - "${OTEL_COLLECTOR_PORT_GRPC}:${OTEL_COLLECTOR_PORT_GRPC}"
    #     #    environment:
    #     #      - METRICS_STORAGE_TYPE=prometheus

#  otelcol:
#    image: ${COLLECTOR_CONTRIB_IMAGE}
#    container_name: otelcol
#    hostname: otelcol
#    deploy:
#      resources:
#        limits:
#          memory: 125M
#    restart: unless-stopped
#    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
#    volumes:
#      - ./otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
#      - ./otelcollector/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
#    ports:
#      - "${OTEL_COLLECTOR_PORT_GRPC}:${OTEL_COLLECTOR_PORT_GRPC}"
#      - "${OTEL_COLLECTOR_PORT_HTTP}:${OTEL_COLLECTOR_PORT_HTTP}"
#    depends_on:
#      - jaeger
#
#    environment:
#      - ENVOY_PORT
#    networks:
#      - monitoring-zone

  grafana:
    image: ${GRAFANA_IMAGE}
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 100M
    restart: unless-stopped
    environment:
      - "GF_INSTALL_PLUGINS=grafana-opensearch-datasource"
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "${GRAFANA_SERVICE_PORT}:${GRAFANA_SERVICE_PORT}"
    networks:
      - monitoring-zone

networks:
  monitoring-zone:

