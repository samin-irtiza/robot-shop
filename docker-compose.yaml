version: '3'
services:
  mongodb:
    build:
      context: mongo
      dockerfile: Dockerfile
      tags: 
        - ${REPO}/rs-mongodb:${TAG}
    container_name: mongo-database
    hostname: mongo-database
    networks:
      - app-zone
  redis:
    image: redis:6.2-alpine
    hostname: redis
    networks:
      - app-zone
  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    hostname: rabbitmq
    networks:
      - app-zone
    ports:
      - "15672:15672"
      - "15692:15692"
  catalogue:
    build:
      context: catalogue
      dockerfile: Dockerfile
      tags: 
        - ${REPO}/rs-catalogue:${TAG}
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_GRPC}
    depends_on:
      - mongodb
    networks:
      - app-zone
  user:
    build:
      context: user
      dockerfile: Dockerfile
      tags: 
        - ${REPO}/rs-user:${TAG}
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_GRPC}
    depends_on:
      - mongodb
      - redis
    networks:
      - app-zone
  cart:
    build:
      context: cart
      dockerfile: Dockerfile
      tags: 
        - ${REPO}/rs-cart:${TAG}
    environment: 
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_GRPC}
      - OTEL_TRACES_EXPORTER=otlp
    depends_on:
      - redis
    networks:
      - app-zone
  mysql:
    build:
      context: mysql
      dockerfile: Dockerfile
      tags: 
        - ${REPO}/rs-mysql-db:${TAG}
    cap_add:
      - NET_ADMIN
    networks:
      - app-zone
  shipping:
    build:
      context: shipping
      dockerfile: Dockerfile
      tags: 
        - ${REPO}/rs-shipping:${TAG}
    container_name: rs-shipping
    environment:
      - OTEL_SERVICE_NAME=shipping
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_GRPC}
      - OTEL_LOGS_EXPORTER=none
      - OTEL_METRICS_EXPORTER=prometheus
        #  - OTEL_EXPORTER_PROMETHEUS_HOST=${PROMETHEUS_SERVICE_HOST}
        #  - OTEL_EXPORTER_PROMETHEUS_PORT=${PROMETHEUS_SERVICE_PORT}
      - OTEL_EXPORTER_OTLP_TRACES_PROTOCOL=grpc
      #- OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14250
    depends_on:
      - mysql
    networks:
      - app-zone

  ratings:
    build:
      context: ratings
      dockerfile: Dockerfile
      tags: 
        - ${REPO}/rs-ratings:${TAG}
    environment:
      APP_ENV: prod
    networks:
      - app-zone
    depends_on:
      - mysql

  payment:
    build:
      context: payment
      dockerfile: Dockerfile
      tags: 
        - ${REPO}/rs-payment:${TAG}
    depends_on:
      - rabbitmq
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_GRPC}
    networks:
      - app-zone
    # Uncomment to change payment gateway
    #environment:
      #PAYMENT_GATEWAY: "https://www.worldpay.com"
  dispatch:
    build:
      context: dispatch
      dockerfile: Dockerfile
      tags: 
        - ${REPO}/rs-dispatch:${TAG}
    depends_on:
      - rabbitmq
    networks:
      - app-zone
  web:
    build:
      context: web
      dockerfile: Dockerfile
      args:
        # agent key to download tracing libs
        KEY: ${INSTANA_AGENT_KEY}
      tags: 
        - ${REPO}/rs-web:${TAG}
    depends_on:
      - catalogue
      - user
      - shipping
      - payment
    ports:
      - "8080:8080"
    networks:
      - app-zone
    # Uncomment to enable Instana EUM
    # environment:
      # INSTANA_EUM_KEY: <your eum key>
      # INSTANA_EUM_REPORTING_URL: <your reporting url>
  # --------------------------------------------------------- MONITORING TOOLS ---------------------------------------------------------------------
#  prometheus:
#    image: ${PROMETHEUS_IMAGE}
#    container_name: prometheus
#    command:
#      - --web.console.templates=/etc/prometheus/consoles
#      - --web.console.libraries=/etc/prometheus/console_libraries
#      - --storage.tsdb.retention.time=1h
#      - --config.file=/etc/prometheus/prometheus-config.yaml
#      - --storage.tsdb.path=/prometheus
#      - --web.enable-lifecycle
#      - --web.route-prefix=/
#      - --enable-feature=exemplar-storage
#      - --enable-feature=otlp-write-receiver
#    volumes:
#      - ./prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
#    deploy:
#      resources:
#        limits:
#          memory: 300M
#    restart: unless-stopped
#    ports:
#      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"
#    networks:
#      - app-zone
#    logging: *logging
#
#  jaeger:
#    image: ${JAEGERTRACING_IMAGE}
#    container_name: jaeger
#    command:
#      - "--memory.max-traces=5000"
#      - "--query.base-path=/jaeger/ui"
# #     - "--prometheus.server-url=http://${PROMETHEUS_ADDR}"
# #     - "--prometheus.query.normalize-calls=true"
# #     - "--prometheus.query.normalize-duration=true"
#    deploy:
#      resources:
#        limits:
#          memory: 300M
#    restart: unless-stopped
#    networks:
#      - app-zone
#    ports:
#      - "${JAEGER_SERVICE_PORT}"         # Jaeger UI
#      - "${OTEL_COLLECTOR_PORT_GRPC}"
#        #    environment:
#        #      - METRICS_STORAGE_TYPE=prometheus
#    logging: *logging
  otelcol:
    image: ${COLLECTOR_CONTRIB_IMAGE}
    container_name: otelcol
    hostname: otelcol
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    volumes:
      - ./otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
      - ./otelcollector/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
    ports:
      - "${OTEL_COLLECTOR_PORT_GRPC}"
      - "${OTEL_COLLECTOR_PORT_HTTP}"
      - "8888:8888"
      - "8889:8889"
    environment:
      - ENVOY_PORT
    networks:
      - app-zone
      - monitoring-zone
#
#  grafana:
#    image: ${GRAFANA_IMAGE}
#    container_name: grafana
#    deploy:
#      resources:
#        limits:
#          memory: 100M
#    restart: unless-stopped
#    environment:
#      - "GF_INSTALL_PLUGINS=grafana-opensearch-datasource"
#    volumes:
#      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
#      - ./grafana/provisioning/:/etc/grafana/provisioning/
#    ports:
#      - "${GRAFANA_SERVICE_PORT}:${GRAFANA_SERVICE_PORT}"
#    logging: *logging
#    networks:
#      - app-zone
  redis-exporter:
    image: oliver006/redis_exporter
    hostname: redis-exporter
    environment:
      - REDIS_ADDR=redis:6379
    networks:
      - app-zone
  
  mongodb-exporter:
    image: percona/mongodb_exporter:0.20
    hostname: mongodb-exporter
    command:
      # - --compatible-mode
      # - '--log.level="info"'
      - --mongodb.direct-connect
      - --mongodb.uri=mongodb://mongo-database:27017
    # environment:
      # - MONGODB_URI=mongodb://mongo-database:27017
    networks:
      - app-zone
networks:
  app-zone:
  monitoring-zone:
